# adapted from https://github.com/changesets/action?tab=readme-ov-file#with-publishing & https://pnpm.io/using-changesets#publishing
name: Release

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 10 * * MON"
  workflow_dispatch:

env:
  CI: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  default:
    timeout-minutes: 15
    name: Default Job
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: ⏬ Checkout repo
        uses: actions/checkout@v4

      - name: 🆙 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 🆙 Setup pnpm config
        run: pnpm config set store-dir .pnpm-store

      - name: ⏬ Install pnpm
        run: pnpm install

      - name: 🔨 Build all
        run: pnpm build

      - name: 🆙 Setup .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            @db-ux:registry=https://registry.npmjs.org/
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ⬆️ Create Release Pull Request or Publish tag
        if: ${{ github.event.pull_request == null }} # only on main
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm ci:version
          commit: "chore: update versions"
          title: "chore: update versions"
          publish: pnpm ci:tag
        env:
          GITHUB_TOKEN: ${{ secrets.CHANGESET_TOKEN }}

      - name: ⏫ Publish npm
        if: ${{ steps.changesets.outputs.published == 'true' }} # only when published
        run: pnpm ci:publish
        env:
          NPM_CONFIG_PROVENANCE: true

      - name: ⏫ Upload Release Assets
        if: ${{ steps.changesets.outputs.published == 'true' }} # only when published
        id: upload-release-asset
        uses: actions/github-script@v7
        env:
          ICON_RELEASE_ID: ${{ vars.ICON_RELEASE_ID }}
        with:
          result-encoding: json
          script: |
            const { default: release } = await import('${{ github.workspace }}/.github/scripts/release/index.js');
            const iconReleaseId = '${{ env.ICON_RELEASE_ID }}'
            const workspace = '${{ github.workspace }}';
            return await release({github, context, workspace, iconReleaseId})
